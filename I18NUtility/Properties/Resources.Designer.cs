//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace I18NUtility.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("I18NUtility.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred: {0}.
        /// </summary>
        internal static string AnErrorOccurred {
            get {
                return ResourceManager.GetString("AnErrorOccurred", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attach debugger now.
        /// </summary>
        internal static string AttachDebugger {
            get {
                return ResourceManager.GetString("AttachDebugger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command is required.
        /// </summary>
        internal static string CommandRequired {
            get {
                return ResourceManager.GetString("CommandRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate parameter: {0}.
        /// </summary>
        internal static string DuplicateParameter {
            get {
                return ResourceManager.GetString("DuplicateParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Examples:
        ///.
        /// </summary>
        internal static string Examples {
            get {
                return ResourceManager.GetString("Examples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recursively export all RESX files from source location to target.
        ///  {0} ExportResx -S &quot;C:\SomeProject&quot; -T &quot;C:\I18NExport&quot;.
        /// </summary>
        internal static string ExportResxCommandExamples {
            get {
                return ResourceManager.GetString("ExportResxCommandExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Source|S &lt;folder path&gt;
        ///
        ///  The path to a source folder containing RESX 
        ///  files to export from. Typically this will be 
        ///  the Dev location.
        ///
        ///-Target|T &lt;folder path&gt;
        ///
        ///  The path to a target folder where the RESX
        ///  files will be extracted to..
        /// </summary>
        internal static string ExportResxCommandUsage {
            get {
                return ResourceManager.GetString("ExportResxCommandUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exported: {0} files..
        /// </summary>
        internal static string ExportResxFilesExported {
            get {
                return ResourceManager.GetString("ExportResxFilesExported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to failed:{0}.
        /// </summary>
        internal static string Failed {
            get {
                return ResourceManager.GetString("Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate pseudo RESX files. 
        ///  {0} GenerateResx -P &quot;C:\SomeProject&quot; -CC ja
        ///
        ///Generate blank RESX files for a given culture code. 
        ///  {0} GenerateResx -P &quot;C:\SomeProject&quot; -CC fr.
        /// </summary>
        internal static string GenerateResxCommandExamples {
            get {
                return ResourceManager.GetString("GenerateResxCommandExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Path|P &lt;folder path&gt;
        ///
        ///  The path to a folder containing RESX files. 
        ///  The generated RESX files will be in the same 
        ///  location under &quot;filename.CC.resx&quot;, 
        ///  where &quot;CC&quot; is the culture code provided.
        ///
        ///-CultureCode|CC &lt;code&gt;
        ///
        ///  The culture code of the file to be translated. If the
        ///  culture code is &quot;ja&quot; it will be pseudo translated, 
        ///  otherwise it will create a blank RESX file..
        /// </summary>
        internal static string GenerateResxCommandUsage {
            get {
                return ResourceManager.GetString("GenerateResxCommandUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found: {0} empty files..
        /// </summary>
        internal static string GenerateResxEmptyFilesFound {
            get {
                return ResourceManager.GetString("GenerateResxEmptyFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Could not convert file {0}.
        /// </summary>
        internal static string GenerateResxError {
            get {
                return ResourceManager.GetString("GenerateResxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generated: {0} files..
        /// </summary>
        internal static string GenerateResxFilesGenerated {
            get {
                return ResourceManager.GetString("GenerateResxFilesGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found: {0} invariant files.
        /// </summary>
        internal static string GenerateResxInvariantFilesFound {
            get {
                return ResourceManager.GetString("GenerateResxInvariantFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: No text resources found in: .
        /// </summary>
        internal static string GenerateResxNoResourcesWarning {
            get {
                return ResourceManager.GetString("GenerateResxNoResourcesWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found: {0} resources..
        /// </summary>
        internal static string GenerateResxResourcesFound {
            get {
                return ResourceManager.GetString("GenerateResxResourcesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generated: {0} resources..
        /// </summary>
        internal static string GenerateResxResourcesGenerated {
            get {
                return ResourceManager.GetString("GenerateResxResourcesGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found: {0} words..
        /// </summary>
        internal static string GenerateResxWordsFound {
            get {
                return ResourceManager.GetString("GenerateResxWordsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import all non-invariant RESX files from source location to target.
        ///  {0} ImportResx -S &quot;C:\I18NExport&quot; -T &quot;C:\SomeProject&quot;.
        /// </summary>
        internal static string ImportResxCommandExamples {
            get {
                return ResourceManager.GetString("ImportResxCommandExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -Source|S &lt;folder path&gt;
        ///
        ///  The path to a source folder containing RESX 
        ///  files to import from.
        ///
        ///-Target|T &lt;folder path&gt;
        ///
        ///  The path to a target folder where the RESX
        ///  files will be imported to. Typically this will 
        ///  be the Dev location and only the non-invariant
        ///  RESX files will be imported..
        /// </summary>
        internal static string ImportResxCommandUsage {
            get {
                return ResourceManager.GetString("ImportResxCommandUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported: {0} files..
        /// </summary>
        internal static string ImportResxFilesImported {
            get {
                return ResourceManager.GetString("ImportResxFilesImported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid command: {0}.
        /// </summary>
        internal static string InvalidCommand {
            get {
                return ResourceManager.GetString("InvalidCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid parameter: {0} {1}.
        /// </summary>
        internal static string InvalidParameter {
            get {
                return ResourceManager.GetString("InvalidParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid syntax near {0}.
        /// </summary>
        internal static string InvalidSyntax {
            get {
                return ResourceManager.GetString("InvalidSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one command may be specified.
        /// </summary>
        internal static string OnlyOneCommandAllowed {
            get {
                return ResourceManager.GetString("OnlyOneCommandAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} command must have a &apos;{1}&apos; parameter.
        /// </summary>
        internal static string ParameterRequired {
            get {
                return ResourceManager.GetString("ParameterRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Processing command &apos;{0}&apos;....
        /// </summary>
        internal static string ProcessingCommand {
            get {
                return ResourceManager.GetString("ProcessingCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to succeeded.
        /// </summary>
        internal static string Succeeded {
            get {
                return ResourceManager.GetString("Succeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} version {1}
        ///
        ///Usage: {0} COMMAND [PARAMETERS]
        ///
        ///
        ///COMMAND             PARAMETERS
        ///-------             ----------
        ///.
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
    }
}
