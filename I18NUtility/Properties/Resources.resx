<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnErrorOccurred" xml:space="preserve">
    <value>An error occurred: {0}</value>
  </data>
  <data name="AttachDebugger" xml:space="preserve">
    <value>Attach debugger now</value>
  </data>
  <data name="CommandRequired" xml:space="preserve">
    <value>Command is required</value>
  </data>
  <data name="DuplicateParameter" xml:space="preserve">
    <value>Duplicate parameter: {0}</value>
  </data>
  <data name="Examples" xml:space="preserve">
    <value>Examples:
</value>
  </data>
  <data name="ExportResxCommandExamples" xml:space="preserve">
    <value>Recursively export all RESX files from source location to target.
  {0} ExportResx -S "C:\SomeProject" -T "C:\I18NExport"</value>
  </data>
  <data name="ExportResxCommandUsage" xml:space="preserve">
    <value>-Source|S &lt;folder path&gt;

  The path to a source folder containing RESX 
  files to export from. Typically this will be 
  the Dev location.

-Target|T &lt;folder path&gt;

  The path to a target folder where the RESX
  files will be extracted to.</value>
  </data>
  <data name="ExportResxFilesExported" xml:space="preserve">
    <value>Exported: {0} files.</value>
  </data>
  <data name="Failed" xml:space="preserve">
    <value>failed:{0}</value>
  </data>
  <data name="GenerateResxCommandExamples" xml:space="preserve">
    <value>Generate pseudo RESX files. 
  {0} GenerateResx -P "C:\SomeProject" -CC ja

Generate blank RESX files for a given culture code. 
  {0} GenerateResx -P "C:\SomeProject" -CC fr</value>
  </data>
  <data name="GenerateResxCommandUsage" xml:space="preserve">
    <value>-Path|P &lt;folder path&gt;

  The path to a folder containing RESX files. 
  The generated RESX files will be in the same 
  location under "filename.CC.resx", 
  where "CC" is the culture code provided.

-CultureCode|CC &lt;code&gt;

  The culture code of the file to be translated. If the
  culture code is "ja" it will be pseudo translated, 
  otherwise it will create a blank RESX file.</value>
  </data>
  <data name="GenerateResxEmptyFilesFound" xml:space="preserve">
    <value>Found: {0} empty files.</value>
  </data>
  <data name="GenerateResxError" xml:space="preserve">
    <value>ERROR: Could not convert file {0}</value>
  </data>
  <data name="GenerateResxFilesGenerated" xml:space="preserve">
    <value>Generated: {0} files.</value>
  </data>
  <data name="GenerateResxInvariantFilesFound" xml:space="preserve">
    <value>Found: {0} invariant files</value>
  </data>
  <data name="GenerateResxNoResourcesWarning" xml:space="preserve">
    <value>WARNING: No text resources found in: </value>
  </data>
  <data name="GenerateResxResourcesFound" xml:space="preserve">
    <value>Found: {0} resources.</value>
  </data>
  <data name="GenerateResxResourcesGenerated" xml:space="preserve">
    <value>Generated: {0} resources.</value>
  </data>
  <data name="GenerateResxWordsFound" xml:space="preserve">
    <value>Found: {0} words.</value>
  </data>
  <data name="ImportResxCommandExamples" xml:space="preserve">
    <value>Import all non-invariant RESX files from source location to target.
  {0} ImportResx -S "C:\I18NExport" -T "C:\SomeProject"</value>
  </data>
  <data name="ImportResxCommandUsage" xml:space="preserve">
    <value>-Source|S &lt;folder path&gt;

  The path to a source folder containing RESX 
  files to import from.

-Target|T &lt;folder path&gt;

  The path to a target folder where the RESX
  files will be imported to. Typically this will 
  be the Dev location and only the non-invariant
  RESX files will be imported.</value>
  </data>
  <data name="ImportResxFilesImported" xml:space="preserve">
    <value>Imported: {0} files.</value>
  </data>
  <data name="InvalidCommand" xml:space="preserve">
    <value>Invalid command: {0}</value>
  </data>
  <data name="InvalidParameter" xml:space="preserve">
    <value>Invalid parameter: {0} {1}</value>
  </data>
  <data name="InvalidSyntax" xml:space="preserve">
    <value>Invalid syntax near {0}</value>
  </data>
  <data name="OnlyOneCommandAllowed" xml:space="preserve">
    <value>Only one command may be specified</value>
  </data>
  <data name="ParameterRequired" xml:space="preserve">
    <value>{0} command must have a '{1}' parameter</value>
  </data>
  <data name="ProcessingCommand" xml:space="preserve">
    <value>Processing command '{0}'...</value>
  </data>
  <data name="Succeeded" xml:space="preserve">
    <value>succeeded</value>
  </data>
  <data name="Usage" xml:space="preserve">
    <value>{0} version {1}

Usage: {0} COMMAND [PARAMETERS]


COMMAND             PARAMETERS
-------             ----------
</value>
  </data>
</root>